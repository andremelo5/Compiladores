Terminals which are not used

   RESERVED
   UPLUS
   UMINUS
   IFELSE


Grammar

    0 $accept: program $end

    1 program: PACKAGE IDENTIFIER SEMICOLON declarations

    2 declarations: vardeclaration SEMICOLON declarations
    3             | funcdeclaration SEMICOLON declarations
    4             | /* empty */

    5 vardeclaration: VAR varspec
    6               | VAR LPAR varspec SEMICOLON RPAR

    7 varspec: IDENTIFIER varspec2 type

    8 varspec2: COMMA IDENTIFIER varspec2
    9         | /* empty */

   10 type: INT
   11     | FLOAT32
   12     | BOOL
   13     | STRING

   14 funcdeclaration: FUNC funcheader funcbody

   15 funcheader: IDENTIFIER LPAR funcparams RPAR funcheader2

   16 funcparams: parameters
   17           | /* empty */

   18 funcheader2: type
   19            | /* empty */

   20 parameters: IDENTIFIER type parameters2

   21 parameters2: COMMA IDENTIFIER type parameters2
   22            | /* empty */

   23 funcbody: LBRACE varsandstatements RBRACE

   24 varsandstatements: varsandstatements SEMICOLON
   25                  | varsandstatements vardeclaration SEMICOLON
   26                  | varsandstatements statement SEMICOLON
   27                  | /* empty */

   28 statement: IDENTIFIER ASSIGN expr
   29          | LBRACE statement2 RBRACE
   30          | IF expr LBRACE statement2 RBRACE statement3
   31          | FOR statement4 LBRACE statement2 RBRACE
   32          | RETURN statement4
   33          | funcinvocation
   34          | parseargs
   35          | PRINT LPAR printstatement RPAR
   36          | error

   37 statement2: statement2 statement SEMICOLON
   38           | /* empty */

   39 statement3: ELSE LBRACE statement2 RBRACE
   40           | /* empty */

   41 statement4: expr
   42           | /* empty */

   43 printstatement: expr
   44               | STRLIT

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR

   47 funcinvocation: IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | IDENTIFIER LPAR RPAR
   49               | IDENTIFIER LPAR error RPAR

   50 funcinvocation2: COMMA expr funcinvocation2
   51                | /* empty */

   52 expr: expr OR expr
   53     | expr AND expr
   54     | expr LT expr
   55     | expr GT expr
   56     | expr EQ expr
   57     | expr NE expr
   58     | expr LE expr
   59     | expr GE expr
   60     | expr PLUS expr
   61     | expr MINUS expr
   62     | expr STAR expr
   63     | expr DIV expr
   64     | expr MOD expr
   65     | NOT expr
   66     | MINUS expr
   67     | PLUS expr
   68     | NATURAL
   69     | DECIMAL
   70     | IDENTIFIER
   71     | funcinvocation
   72     | LPAR expr RPAR
   73     | LPAR error RPAR


Terminals, with rules where they appear

$end (0) 0
error (256) 36 46 49 73
SEMICOLON (258) 1 2 3 6 24 25 26 37
COMMA (259) 8 21 45 46 50
BLANKID (260) 45 46
ASSIGN (261) 28 45 46
STAR (262) 62
DIV (263) 63
MINUS (264) 61 66
PLUS (265) 60 67
EQ (266) 56
GE (267) 59
GT (268) 55
LBRACE (269) 23 29 30 31 39
LE (270) 58
LPAR (271) 6 15 35 45 46 47 48 49 72 73
LSQ (272) 45
LT (273) 54
MOD (274) 64
NE (275) 57
NOT (276) 65
AND (277) 53
OR (278) 52
RBRACE (279) 23 29 30 31 39
RPAR (280) 6 15 35 45 46 47 48 49 72 73
RSQ (281) 45
PACKAGE (282) 1
RETURN (283) 32
ELSE (284) 39
FOR (285) 31
IF (286) 30
VAR (287) 5 6
INT (288) 10
FLOAT32 (289) 11
BOOL (290) 12
STRING (291) 13
PRINT (292) 35
PARSEINT (293) 45 46
FUNC (294) 14
CMDARGS (295) 45
RESERVED (296)
IDENTIFIER (297) 1 7 8 15 20 21 28 45 46 47 48 49 70
NATURAL (298) 68
DECIMAL (299) 69
STRLIT (300) 44
UPLUS (301)
UMINUS (302)
IFELSE (303)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1, on right: 0
declarations (51)
    on left: 2 3 4, on right: 1 2 3
vardeclaration (52)
    on left: 5 6, on right: 2 25
varspec (53)
    on left: 7, on right: 5 6
varspec2 (54)
    on left: 8 9, on right: 7 8
type (55)
    on left: 10 11 12 13, on right: 7 18 20 21
funcdeclaration (56)
    on left: 14, on right: 3
funcheader (57)
    on left: 15, on right: 14
funcparams (58)
    on left: 16 17, on right: 15
funcheader2 (59)
    on left: 18 19, on right: 15
parameters (60)
    on left: 20, on right: 16
parameters2 (61)
    on left: 21 22, on right: 20 21
funcbody (62)
    on left: 23, on right: 14
varsandstatements (63)
    on left: 24 25 26 27, on right: 23 24 25 26
statement (64)
    on left: 28 29 30 31 32 33 34 35 36, on right: 26 37
statement2 (65)
    on left: 37 38, on right: 29 30 31 37 39
statement3 (66)
    on left: 39 40, on right: 30
statement4 (67)
    on left: 41 42, on right: 31 32
printstatement (68)
    on left: 43 44, on right: 35
parseargs (69)
    on left: 45 46, on right: 34
funcinvocation (70)
    on left: 47 48 49, on right: 33 71
funcinvocation2 (71)
    on left: 50 51, on right: 47 50
expr (72)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
    70 71 72 73, on right: 28 30 41 43 45 47 50 52 53 54 55 56 57 58
    59 60 61 62 63 64 65 66 67 72


state 0

    0 $accept: . program $end
    1 program: . PACKAGE IDENTIFIER SEMICOLON declarations

    PACKAGE  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PACKAGE . IDENTIFIER SEMICOLON declarations

    IDENTIFIER  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: PACKAGE IDENTIFIER . SEMICOLON declarations

    SEMICOLON  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: PACKAGE IDENTIFIER SEMICOLON . declarations
    2 declarations: . vardeclaration SEMICOLON declarations
    3             | . funcdeclaration SEMICOLON declarations
    4             | .  [$end]
    5 vardeclaration: . VAR varspec
    6               | . VAR LPAR varspec SEMICOLON RPAR
   14 funcdeclaration: . FUNC funcheader funcbody

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (declarations)

    declarations     go to state 8
    vardeclaration   go to state 9
    funcdeclaration  go to state 10


state 6

    5 vardeclaration: VAR . varspec
    6               | VAR . LPAR varspec SEMICOLON RPAR
    7 varspec: . IDENTIFIER varspec2 type

    LPAR        shift, and go to state 11
    IDENTIFIER  shift, and go to state 12

    varspec  go to state 13


state 7

   14 funcdeclaration: FUNC . funcheader funcbody
   15 funcheader: . IDENTIFIER LPAR funcparams RPAR funcheader2

    IDENTIFIER  shift, and go to state 14

    funcheader  go to state 15


state 8

    1 program: PACKAGE IDENTIFIER SEMICOLON declarations .

    $default  reduce using rule 1 (program)


state 9

    2 declarations: vardeclaration . SEMICOLON declarations

    SEMICOLON  shift, and go to state 16


state 10

    3 declarations: funcdeclaration . SEMICOLON declarations

    SEMICOLON  shift, and go to state 17


state 11

    6 vardeclaration: VAR LPAR . varspec SEMICOLON RPAR
    7 varspec: . IDENTIFIER varspec2 type

    IDENTIFIER  shift, and go to state 12

    varspec  go to state 18


state 12

    7 varspec: IDENTIFIER . varspec2 type
    8 varspec2: . COMMA IDENTIFIER varspec2
    9         | .  [INT, FLOAT32, BOOL, STRING]

    COMMA  shift, and go to state 19

    $default  reduce using rule 9 (varspec2)

    varspec2  go to state 20


state 13

    5 vardeclaration: VAR varspec .

    $default  reduce using rule 5 (vardeclaration)


state 14

   15 funcheader: IDENTIFIER . LPAR funcparams RPAR funcheader2

    LPAR  shift, and go to state 21


state 15

   14 funcdeclaration: FUNC funcheader . funcbody
   23 funcbody: . LBRACE varsandstatements RBRACE

    LBRACE  shift, and go to state 22

    funcbody  go to state 23


state 16

    2 declarations: . vardeclaration SEMICOLON declarations
    2             | vardeclaration SEMICOLON . declarations
    3             | . funcdeclaration SEMICOLON declarations
    4             | .  [$end]
    5 vardeclaration: . VAR varspec
    6               | . VAR LPAR varspec SEMICOLON RPAR
   14 funcdeclaration: . FUNC funcheader funcbody

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (declarations)

    declarations     go to state 24
    vardeclaration   go to state 9
    funcdeclaration  go to state 10


state 17

    2 declarations: . vardeclaration SEMICOLON declarations
    3             | . funcdeclaration SEMICOLON declarations
    3             | funcdeclaration SEMICOLON . declarations
    4             | .  [$end]
    5 vardeclaration: . VAR varspec
    6               | . VAR LPAR varspec SEMICOLON RPAR
   14 funcdeclaration: . FUNC funcheader funcbody

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (declarations)

    declarations     go to state 25
    vardeclaration   go to state 9
    funcdeclaration  go to state 10


state 18

    6 vardeclaration: VAR LPAR varspec . SEMICOLON RPAR

    SEMICOLON  shift, and go to state 26


state 19

    8 varspec2: COMMA . IDENTIFIER varspec2

    IDENTIFIER  shift, and go to state 27


state 20

    7 varspec: IDENTIFIER varspec2 . type
   10 type: . INT
   11     | . FLOAT32
   12     | . BOOL
   13     | . STRING

    INT      shift, and go to state 28
    FLOAT32  shift, and go to state 29
    BOOL     shift, and go to state 30
    STRING   shift, and go to state 31

    type  go to state 32


state 21

   15 funcheader: IDENTIFIER LPAR . funcparams RPAR funcheader2
   16 funcparams: . parameters
   17           | .  [RPAR]
   20 parameters: . IDENTIFIER type parameters2

    IDENTIFIER  shift, and go to state 33

    $default  reduce using rule 17 (funcparams)

    funcparams  go to state 34
    parameters  go to state 35


state 22

   23 funcbody: LBRACE . varsandstatements RBRACE
   24 varsandstatements: . varsandstatements SEMICOLON
   25                  | . varsandstatements vardeclaration SEMICOLON
   26                  | . varsandstatements statement SEMICOLON
   27                  | .

    $default  reduce using rule 27 (varsandstatements)

    varsandstatements  go to state 36


state 23

   14 funcdeclaration: FUNC funcheader funcbody .

    $default  reduce using rule 14 (funcdeclaration)


state 24

    2 declarations: vardeclaration SEMICOLON declarations .

    $default  reduce using rule 2 (declarations)


state 25

    3 declarations: funcdeclaration SEMICOLON declarations .

    $default  reduce using rule 3 (declarations)


state 26

    6 vardeclaration: VAR LPAR varspec SEMICOLON . RPAR

    RPAR  shift, and go to state 37


state 27

    8 varspec2: . COMMA IDENTIFIER varspec2
    8         | COMMA IDENTIFIER . varspec2
    9         | .  [INT, FLOAT32, BOOL, STRING]

    COMMA  shift, and go to state 19

    $default  reduce using rule 9 (varspec2)

    varspec2  go to state 38


state 28

   10 type: INT .

    $default  reduce using rule 10 (type)


state 29

   11 type: FLOAT32 .

    $default  reduce using rule 11 (type)


state 30

   12 type: BOOL .

    $default  reduce using rule 12 (type)


state 31

   13 type: STRING .

    $default  reduce using rule 13 (type)


state 32

    7 varspec: IDENTIFIER varspec2 type .

    $default  reduce using rule 7 (varspec)


state 33

   10 type: . INT
   11     | . FLOAT32
   12     | . BOOL
   13     | . STRING
   20 parameters: IDENTIFIER . type parameters2

    INT      shift, and go to state 28
    FLOAT32  shift, and go to state 29
    BOOL     shift, and go to state 30
    STRING   shift, and go to state 31

    type  go to state 39


state 34

   15 funcheader: IDENTIFIER LPAR funcparams . RPAR funcheader2

    RPAR  shift, and go to state 40


state 35

   16 funcparams: parameters .

    $default  reduce using rule 16 (funcparams)


state 36

    5 vardeclaration: . VAR varspec
    6               | . VAR LPAR varspec SEMICOLON RPAR
   23 funcbody: LBRACE varsandstatements . RBRACE
   24 varsandstatements: varsandstatements . SEMICOLON
   25                  | varsandstatements . vardeclaration SEMICOLON
   26                  | varsandstatements . statement SEMICOLON
   28 statement: . IDENTIFIER ASSIGN expr
   29          | . LBRACE statement2 RBRACE
   30          | . IF expr LBRACE statement2 RBRACE statement3
   31          | . FOR statement4 LBRACE statement2 RBRACE
   32          | . RETURN statement4
   33          | . funcinvocation
   34          | . parseargs
   35          | . PRINT LPAR printstatement RPAR
   36          | . error
   45 parseargs: . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR

    error       shift, and go to state 41
    SEMICOLON   shift, and go to state 42
    LBRACE      shift, and go to state 43
    RBRACE      shift, and go to state 44
    RETURN      shift, and go to state 45
    FOR         shift, and go to state 46
    IF          shift, and go to state 47
    VAR         shift, and go to state 6
    PRINT       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49

    vardeclaration  go to state 50
    statement       go to state 51
    parseargs       go to state 52
    funcinvocation  go to state 53


state 37

    6 vardeclaration: VAR LPAR varspec SEMICOLON RPAR .

    $default  reduce using rule 6 (vardeclaration)


state 38

    8 varspec2: COMMA IDENTIFIER varspec2 .

    $default  reduce using rule 8 (varspec2)


state 39

   20 parameters: IDENTIFIER type . parameters2
   21 parameters2: . COMMA IDENTIFIER type parameters2
   22            | .  [RPAR]

    COMMA  shift, and go to state 54

    $default  reduce using rule 22 (parameters2)

    parameters2  go to state 55


state 40

   10 type: . INT
   11     | . FLOAT32
   12     | . BOOL
   13     | . STRING
   15 funcheader: IDENTIFIER LPAR funcparams RPAR . funcheader2
   18 funcheader2: . type
   19            | .  [LBRACE]

    INT      shift, and go to state 28
    FLOAT32  shift, and go to state 29
    BOOL     shift, and go to state 30
    STRING   shift, and go to state 31

    $default  reduce using rule 19 (funcheader2)

    type         go to state 56
    funcheader2  go to state 57


state 41

   36 statement: error .

    $default  reduce using rule 36 (statement)


state 42

   24 varsandstatements: varsandstatements SEMICOLON .

    $default  reduce using rule 24 (varsandstatements)


state 43

   29 statement: LBRACE . statement2 RBRACE
   37 statement2: . statement2 statement SEMICOLON
   38           | .

    $default  reduce using rule 38 (statement2)

    statement2  go to state 58


state 44

   23 funcbody: LBRACE varsandstatements RBRACE .

    $default  reduce using rule 23 (funcbody)


state 45

   32 statement: RETURN . statement4
   41 statement4: . expr
   42           | .  [SEMICOLON]
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    $default  reduce using rule 42 (statement4)

    statement4      go to state 66
    funcinvocation  go to state 67
    expr            go to state 68


state 46

   31 statement: FOR . statement4 LBRACE statement2 RBRACE
   41 statement4: . expr
   42           | .  [LBRACE]
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    $default  reduce using rule 42 (statement4)

    statement4      go to state 69
    funcinvocation  go to state 67
    expr            go to state 68


state 47

   30 statement: IF . expr LBRACE statement2 RBRACE statement3
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 70


state 48

   35 statement: PRINT . LPAR printstatement RPAR

    LPAR  shift, and go to state 71


state 49

   28 statement: IDENTIFIER . ASSIGN expr
   45 parseargs: IDENTIFIER . COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | IDENTIFIER . COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR
   47 funcinvocation: IDENTIFIER . LPAR expr funcinvocation2 RPAR
   48               | IDENTIFIER . LPAR RPAR
   49               | IDENTIFIER . LPAR error RPAR

    COMMA   shift, and go to state 72
    ASSIGN  shift, and go to state 73
    LPAR    shift, and go to state 74


state 50

   25 varsandstatements: varsandstatements vardeclaration . SEMICOLON

    SEMICOLON  shift, and go to state 75


state 51

   26 varsandstatements: varsandstatements statement . SEMICOLON

    SEMICOLON  shift, and go to state 76


state 52

   34 statement: parseargs .

    $default  reduce using rule 34 (statement)


state 53

   33 statement: funcinvocation .

    $default  reduce using rule 33 (statement)


state 54

   21 parameters2: COMMA . IDENTIFIER type parameters2

    IDENTIFIER  shift, and go to state 77


state 55

   20 parameters: IDENTIFIER type parameters2 .

    $default  reduce using rule 20 (parameters)


state 56

   18 funcheader2: type .

    $default  reduce using rule 18 (funcheader2)


state 57

   15 funcheader: IDENTIFIER LPAR funcparams RPAR funcheader2 .

    $default  reduce using rule 15 (funcheader)


state 58

   28 statement: . IDENTIFIER ASSIGN expr
   29          | . LBRACE statement2 RBRACE
   29          | LBRACE statement2 . RBRACE
   30          | . IF expr LBRACE statement2 RBRACE statement3
   31          | . FOR statement4 LBRACE statement2 RBRACE
   32          | . RETURN statement4
   33          | . funcinvocation
   34          | . parseargs
   35          | . PRINT LPAR printstatement RPAR
   36          | . error
   37 statement2: statement2 . statement SEMICOLON
   45 parseargs: . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR

    error       shift, and go to state 41
    LBRACE      shift, and go to state 43
    RBRACE      shift, and go to state 78
    RETURN      shift, and go to state 45
    FOR         shift, and go to state 46
    IF          shift, and go to state 47
    PRINT       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49

    statement       go to state 79
    parseargs       go to state 52
    funcinvocation  go to state 53


state 59

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   66     | MINUS . expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 80


state 60

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   67     | PLUS . expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 81


state 61

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   72     | LPAR . expr RPAR
   73     | . LPAR error RPAR
   73     | LPAR . error RPAR

    error       shift, and go to state 82
    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 83


state 62

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   65     | NOT . expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 84


state 63

   47 funcinvocation: IDENTIFIER . LPAR expr funcinvocation2 RPAR
   48               | IDENTIFIER . LPAR RPAR
   49               | IDENTIFIER . LPAR error RPAR
   70 expr: IDENTIFIER .  [SEMICOLON, COMMA, STAR, DIV, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, MOD, NE, AND, OR, RPAR, RSQ]

    LPAR  shift, and go to state 74

    $default  reduce using rule 70 (expr)


state 64

   68 expr: NATURAL .

    $default  reduce using rule 68 (expr)


state 65

   69 expr: DECIMAL .

    $default  reduce using rule 69 (expr)


state 66

   32 statement: RETURN statement4 .

    $default  reduce using rule 32 (statement)


state 67

   71 expr: funcinvocation .

    $default  reduce using rule 71 (expr)


state 68

   41 statement4: expr .  [SEMICOLON, LBRACE]
   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95
    AND    shift, and go to state 96
    OR     shift, and go to state 97

    $default  reduce using rule 41 (statement4)


state 69

   31 statement: FOR statement4 . LBRACE statement2 RBRACE

    LBRACE  shift, and go to state 98


state 70

   30 statement: IF expr . LBRACE statement2 RBRACE statement3
   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR    shift, and go to state 85
    DIV     shift, and go to state 86
    MINUS   shift, and go to state 87
    PLUS    shift, and go to state 88
    EQ      shift, and go to state 89
    GE      shift, and go to state 90
    GT      shift, and go to state 91
    LBRACE  shift, and go to state 99
    LE      shift, and go to state 92
    LT      shift, and go to state 93
    MOD     shift, and go to state 94
    NE      shift, and go to state 95
    AND     shift, and go to state 96
    OR      shift, and go to state 97


state 71

   35 statement: PRINT LPAR . printstatement RPAR
   43 printstatement: . expr
   44               | . STRLIT
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65
    STRLIT      shift, and go to state 100

    printstatement  go to state 101
    funcinvocation  go to state 67
    expr            go to state 102


state 72

   45 parseargs: IDENTIFIER COMMA . BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | IDENTIFIER COMMA . BLANKID ASSIGN PARSEINT LPAR error RPAR

    BLANKID  shift, and go to state 103


state 73

   28 statement: IDENTIFIER ASSIGN . expr
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 104


state 74

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   47               | IDENTIFIER LPAR . expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   48               | IDENTIFIER LPAR . RPAR
   49               | . IDENTIFIER LPAR error RPAR
   49               | IDENTIFIER LPAR . error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    error       shift, and go to state 105
    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    RPAR        shift, and go to state 106
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 107


state 75

   25 varsandstatements: varsandstatements vardeclaration SEMICOLON .

    $default  reduce using rule 25 (varsandstatements)


state 76

   26 varsandstatements: varsandstatements statement SEMICOLON .

    $default  reduce using rule 26 (varsandstatements)


state 77

   10 type: . INT
   11     | . FLOAT32
   12     | . BOOL
   13     | . STRING
   21 parameters2: COMMA IDENTIFIER . type parameters2

    INT      shift, and go to state 28
    FLOAT32  shift, and go to state 29
    BOOL     shift, and go to state 30
    STRING   shift, and go to state 31

    type  go to state 108


state 78

   29 statement: LBRACE statement2 RBRACE .

    $default  reduce using rule 29 (statement)


state 79

   37 statement2: statement2 statement . SEMICOLON

    SEMICOLON  shift, and go to state 109


state 80

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr
   66     | MINUS expr .  [SEMICOLON, COMMA, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]

    STAR  shift, and go to state 85
    DIV   shift, and go to state 86
    MOD   shift, and go to state 94

    $default  reduce using rule 66 (expr)

    Conflict between rule 66 and token STAR resolved as shift (MINUS < STAR).
    Conflict between rule 66 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 66 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 66 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 66 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 66 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 66 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 66 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 66 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 66 and token MOD resolved as shift (MINUS < MOD).
    Conflict between rule 66 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 66 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 66 and token OR resolved as reduce (OR < MINUS).


state 81

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr
   67     | PLUS expr .  [SEMICOLON, COMMA, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]

    STAR  shift, and go to state 85
    DIV   shift, and go to state 86
    MOD   shift, and go to state 94

    $default  reduce using rule 67 (expr)

    Conflict between rule 67 and token STAR resolved as shift (PLUS < STAR).
    Conflict between rule 67 and token DIV resolved as shift (PLUS < DIV).
    Conflict between rule 67 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 67 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 67 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 67 and token GE resolved as reduce (GE < PLUS).
    Conflict between rule 67 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 67 and token LE resolved as reduce (LE < PLUS).
    Conflict between rule 67 and token LT resolved as reduce (LT < PLUS).
    Conflict between rule 67 and token MOD resolved as shift (PLUS < MOD).
    Conflict between rule 67 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 67 and token AND resolved as reduce (AND < PLUS).
    Conflict between rule 67 and token OR resolved as reduce (OR < PLUS).


state 82

   73 expr: LPAR error . RPAR

    RPAR  shift, and go to state 110


state 83

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr
   72     | LPAR expr . RPAR

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95
    AND    shift, and go to state 96
    OR     shift, and go to state 97
    RPAR   shift, and go to state 111


state 84

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr
   65     | NOT expr .  [SEMICOLON, COMMA, LBRACE, AND, OR, RPAR, RSQ]

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95

    $default  reduce using rule 65 (expr)

    Conflict between rule 65 and token STAR resolved as shift (NOT < STAR).
    Conflict between rule 65 and token DIV resolved as shift (NOT < DIV).
    Conflict between rule 65 and token MINUS resolved as shift (NOT < MINUS).
    Conflict between rule 65 and token PLUS resolved as shift (NOT < PLUS).
    Conflict between rule 65 and token EQ resolved as shift (NOT < EQ).
    Conflict between rule 65 and token GE resolved as shift (NOT < GE).
    Conflict between rule 65 and token GT resolved as shift (NOT < GT).
    Conflict between rule 65 and token LE resolved as shift (NOT < LE).
    Conflict between rule 65 and token LT resolved as shift (NOT < LT).
    Conflict between rule 65 and token MOD resolved as shift (NOT < MOD).
    Conflict between rule 65 and token NE resolved as shift (NOT < NE).
    Conflict between rule 65 and token AND resolved as reduce (AND < NOT).
    Conflict between rule 65 and token OR resolved as reduce (OR < NOT).


state 85

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   62     | expr STAR . expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 112


state 86

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   63     | expr DIV . expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 113


state 87

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   61     | expr MINUS . expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 114


state 88

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   60     | expr PLUS . expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 115


state 89

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   56     | expr EQ . expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 116


state 90

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   59     | expr GE . expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 117


state 91

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   55     | expr GT . expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 118


state 92

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   58     | expr LE . expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 119


state 93

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   54     | expr LT . expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 120


state 94

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   64     | expr MOD . expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 121


state 95

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   57     | expr NE . expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 122


state 96

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   53     | expr AND . expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 123


state 97

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   52     | expr OR . expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 124


state 98

   31 statement: FOR statement4 LBRACE . statement2 RBRACE
   37 statement2: . statement2 statement SEMICOLON
   38           | .

    $default  reduce using rule 38 (statement2)

    statement2  go to state 125


state 99

   30 statement: IF expr LBRACE . statement2 RBRACE statement3
   37 statement2: . statement2 statement SEMICOLON
   38           | .

    $default  reduce using rule 38 (statement2)

    statement2  go to state 126


state 100

   44 printstatement: STRLIT .

    $default  reduce using rule 44 (printstatement)


state 101

   35 statement: PRINT LPAR printstatement . RPAR

    RPAR  shift, and go to state 127


state 102

   43 printstatement: expr .  [RPAR]
   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95
    AND    shift, and go to state 96
    OR     shift, and go to state 97

    $default  reduce using rule 43 (printstatement)


state 103

   45 parseargs: IDENTIFIER COMMA BLANKID . ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | IDENTIFIER COMMA BLANKID . ASSIGN PARSEINT LPAR error RPAR

    ASSIGN  shift, and go to state 128


state 104

   28 statement: IDENTIFIER ASSIGN expr .  [SEMICOLON]
   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95
    AND    shift, and go to state 96
    OR     shift, and go to state 97

    $default  reduce using rule 28 (statement)


state 105

   49 funcinvocation: IDENTIFIER LPAR error . RPAR

    RPAR  shift, and go to state 129


state 106

   48 funcinvocation: IDENTIFIER LPAR RPAR .

    $default  reduce using rule 48 (funcinvocation)


state 107

   47 funcinvocation: IDENTIFIER LPAR expr . funcinvocation2 RPAR
   50 funcinvocation2: . COMMA expr funcinvocation2
   51                | .  [RPAR]
   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    COMMA  shift, and go to state 130
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95
    AND    shift, and go to state 96
    OR     shift, and go to state 97

    $default  reduce using rule 51 (funcinvocation2)

    funcinvocation2  go to state 131


state 108

   21 parameters2: . COMMA IDENTIFIER type parameters2
   21            | COMMA IDENTIFIER type . parameters2
   22            | .  [RPAR]

    COMMA  shift, and go to state 54

    $default  reduce using rule 22 (parameters2)

    parameters2  go to state 132


state 109

   37 statement2: statement2 statement SEMICOLON .

    $default  reduce using rule 37 (statement2)


state 110

   73 expr: LPAR error RPAR .

    $default  reduce using rule 73 (expr)


state 111

   72 expr: LPAR expr RPAR .

    $default  reduce using rule 72 (expr)


state 112

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr  [SEMICOLON, COMMA, STAR, DIV, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, MOD, NE, AND, OR, RPAR, RSQ]
   62     | expr STAR expr .  [SEMICOLON, COMMA, STAR, DIV, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, MOD, NE, AND, OR, RPAR, RSQ]
   63     | expr . DIV expr
   64     | expr . MOD expr

    $default  reduce using rule 62 (expr)

    Conflict between rule 62 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 62 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 62 and token MINUS resolved as reduce (MINUS < STAR).
    Conflict between rule 62 and token PLUS resolved as reduce (PLUS < STAR).
    Conflict between rule 62 and token EQ resolved as reduce (EQ < STAR).
    Conflict between rule 62 and token GE resolved as reduce (GE < STAR).
    Conflict between rule 62 and token GT resolved as reduce (GT < STAR).
    Conflict between rule 62 and token LE resolved as reduce (LE < STAR).
    Conflict between rule 62 and token LT resolved as reduce (LT < STAR).
    Conflict between rule 62 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 62 and token NE resolved as reduce (NE < STAR).
    Conflict between rule 62 and token AND resolved as reduce (AND < STAR).
    Conflict between rule 62 and token OR resolved as reduce (OR < STAR).


state 113

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr  [SEMICOLON, COMMA, STAR, DIV, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, MOD, NE, AND, OR, RPAR, RSQ]
   63     | expr DIV expr .  [SEMICOLON, COMMA, STAR, DIV, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, MOD, NE, AND, OR, RPAR, RSQ]
   64     | expr . MOD expr

    $default  reduce using rule 63 (expr)

    Conflict between rule 63 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 63 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 63 and token MINUS resolved as reduce (MINUS < DIV).
    Conflict between rule 63 and token PLUS resolved as reduce (PLUS < DIV).
    Conflict between rule 63 and token EQ resolved as reduce (EQ < DIV).
    Conflict between rule 63 and token GE resolved as reduce (GE < DIV).
    Conflict between rule 63 and token GT resolved as reduce (GT < DIV).
    Conflict between rule 63 and token LE resolved as reduce (LE < DIV).
    Conflict between rule 63 and token LT resolved as reduce (LT < DIV).
    Conflict between rule 63 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 63 and token NE resolved as reduce (NE < DIV).
    Conflict between rule 63 and token AND resolved as reduce (AND < DIV).
    Conflict between rule 63 and token OR resolved as reduce (OR < DIV).


state 114

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr  [SEMICOLON, COMMA, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   61     | expr MINUS expr .  [SEMICOLON, COMMA, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR  shift, and go to state 85
    DIV   shift, and go to state 86
    MOD   shift, and go to state 94

    $default  reduce using rule 61 (expr)

    Conflict between rule 61 and token STAR resolved as shift (MINUS < STAR).
    Conflict between rule 61 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 61 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 61 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 61 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 61 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 61 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 61 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 61 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 61 and token MOD resolved as shift (MINUS < MOD).
    Conflict between rule 61 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 61 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 61 and token OR resolved as reduce (OR < MINUS).


state 115

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr  [SEMICOLON, COMMA, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   60     | expr PLUS expr .  [SEMICOLON, COMMA, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR  shift, and go to state 85
    DIV   shift, and go to state 86
    MOD   shift, and go to state 94

    $default  reduce using rule 60 (expr)

    Conflict between rule 60 and token STAR resolved as shift (PLUS < STAR).
    Conflict between rule 60 and token DIV resolved as shift (PLUS < DIV).
    Conflict between rule 60 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 60 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 60 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 60 and token GE resolved as reduce (GE < PLUS).
    Conflict between rule 60 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 60 and token LE resolved as reduce (LE < PLUS).
    Conflict between rule 60 and token LT resolved as reduce (LT < PLUS).
    Conflict between rule 60 and token MOD resolved as shift (PLUS < MOD).
    Conflict between rule 60 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 60 and token AND resolved as reduce (AND < PLUS).
    Conflict between rule 60 and token OR resolved as reduce (OR < PLUS).


state 116

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   56     | expr EQ expr .  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    MOD    shift, and go to state 94

    $default  reduce using rule 56 (expr)

    Conflict between rule 56 and token STAR resolved as shift (EQ < STAR).
    Conflict between rule 56 and token DIV resolved as shift (EQ < DIV).
    Conflict between rule 56 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 56 and token PLUS resolved as shift (EQ < PLUS).
    Conflict between rule 56 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 56 and token GE resolved as reduce (%left GE).
    Conflict between rule 56 and token GT resolved as reduce (%left GT).
    Conflict between rule 56 and token LE resolved as reduce (%left LE).
    Conflict between rule 56 and token LT resolved as reduce (%left LT).
    Conflict between rule 56 and token MOD resolved as shift (EQ < MOD).
    Conflict between rule 56 and token NE resolved as reduce (%left NE).
    Conflict between rule 56 and token AND resolved as reduce (AND < EQ).
    Conflict between rule 56 and token OR resolved as reduce (OR < EQ).


state 117

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   59     | expr GE expr .  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    MOD    shift, and go to state 94

    $default  reduce using rule 59 (expr)

    Conflict between rule 59 and token STAR resolved as shift (GE < STAR).
    Conflict between rule 59 and token DIV resolved as shift (GE < DIV).
    Conflict between rule 59 and token MINUS resolved as shift (GE < MINUS).
    Conflict between rule 59 and token PLUS resolved as shift (GE < PLUS).
    Conflict between rule 59 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 59 and token GE resolved as reduce (%left GE).
    Conflict between rule 59 and token GT resolved as reduce (%left GT).
    Conflict between rule 59 and token LE resolved as reduce (%left LE).
    Conflict between rule 59 and token LT resolved as reduce (%left LT).
    Conflict between rule 59 and token MOD resolved as shift (GE < MOD).
    Conflict between rule 59 and token NE resolved as reduce (%left NE).
    Conflict between rule 59 and token AND resolved as reduce (AND < GE).
    Conflict between rule 59 and token OR resolved as reduce (OR < GE).


state 118

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   55     | expr GT expr .  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    MOD    shift, and go to state 94

    $default  reduce using rule 55 (expr)

    Conflict between rule 55 and token STAR resolved as shift (GT < STAR).
    Conflict between rule 55 and token DIV resolved as shift (GT < DIV).
    Conflict between rule 55 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 55 and token PLUS resolved as shift (GT < PLUS).
    Conflict between rule 55 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 55 and token GE resolved as reduce (%left GE).
    Conflict between rule 55 and token GT resolved as reduce (%left GT).
    Conflict between rule 55 and token LE resolved as reduce (%left LE).
    Conflict between rule 55 and token LT resolved as reduce (%left LT).
    Conflict between rule 55 and token MOD resolved as shift (GT < MOD).
    Conflict between rule 55 and token NE resolved as reduce (%left NE).
    Conflict between rule 55 and token AND resolved as reduce (AND < GT).
    Conflict between rule 55 and token OR resolved as reduce (OR < GT).


state 119

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   58     | expr LE expr .  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    MOD    shift, and go to state 94

    $default  reduce using rule 58 (expr)

    Conflict between rule 58 and token STAR resolved as shift (LE < STAR).
    Conflict between rule 58 and token DIV resolved as shift (LE < DIV).
    Conflict between rule 58 and token MINUS resolved as shift (LE < MINUS).
    Conflict between rule 58 and token PLUS resolved as shift (LE < PLUS).
    Conflict between rule 58 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 58 and token GE resolved as reduce (%left GE).
    Conflict between rule 58 and token GT resolved as reduce (%left GT).
    Conflict between rule 58 and token LE resolved as reduce (%left LE).
    Conflict between rule 58 and token LT resolved as reduce (%left LT).
    Conflict between rule 58 and token MOD resolved as shift (LE < MOD).
    Conflict between rule 58 and token NE resolved as reduce (%left NE).
    Conflict between rule 58 and token AND resolved as reduce (AND < LE).
    Conflict between rule 58 and token OR resolved as reduce (OR < LE).


state 120

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   54     | expr LT expr .  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    MOD    shift, and go to state 94

    $default  reduce using rule 54 (expr)

    Conflict between rule 54 and token STAR resolved as shift (LT < STAR).
    Conflict between rule 54 and token DIV resolved as shift (LT < DIV).
    Conflict between rule 54 and token MINUS resolved as shift (LT < MINUS).
    Conflict between rule 54 and token PLUS resolved as shift (LT < PLUS).
    Conflict between rule 54 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 54 and token GE resolved as reduce (%left GE).
    Conflict between rule 54 and token GT resolved as reduce (%left GT).
    Conflict between rule 54 and token LE resolved as reduce (%left LE).
    Conflict between rule 54 and token LT resolved as reduce (%left LT).
    Conflict between rule 54 and token MOD resolved as shift (LT < MOD).
    Conflict between rule 54 and token NE resolved as reduce (%left NE).
    Conflict between rule 54 and token AND resolved as reduce (AND < LT).
    Conflict between rule 54 and token OR resolved as reduce (OR < LT).


state 121

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr  [SEMICOLON, COMMA, STAR, DIV, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, MOD, NE, AND, OR, RPAR, RSQ]
   64     | expr MOD expr .  [SEMICOLON, COMMA, STAR, DIV, MINUS, PLUS, EQ, GE, GT, LBRACE, LE, LT, MOD, NE, AND, OR, RPAR, RSQ]

    $default  reduce using rule 64 (expr)

    Conflict between rule 64 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 64 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 64 and token MINUS resolved as reduce (MINUS < MOD).
    Conflict between rule 64 and token PLUS resolved as reduce (PLUS < MOD).
    Conflict between rule 64 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 64 and token GE resolved as reduce (GE < MOD).
    Conflict between rule 64 and token GT resolved as reduce (GT < MOD).
    Conflict between rule 64 and token LE resolved as reduce (LE < MOD).
    Conflict between rule 64 and token LT resolved as reduce (LT < MOD).
    Conflict between rule 64 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 64 and token NE resolved as reduce (NE < MOD).
    Conflict between rule 64 and token AND resolved as reduce (AND < MOD).
    Conflict between rule 64 and token OR resolved as reduce (OR < MOD).


state 122

   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   57     | expr NE expr .  [SEMICOLON, COMMA, EQ, GE, GT, LBRACE, LE, LT, NE, AND, OR, RPAR, RSQ]
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    MOD    shift, and go to state 94

    $default  reduce using rule 57 (expr)

    Conflict between rule 57 and token STAR resolved as shift (NE < STAR).
    Conflict between rule 57 and token DIV resolved as shift (NE < DIV).
    Conflict between rule 57 and token MINUS resolved as shift (NE < MINUS).
    Conflict between rule 57 and token PLUS resolved as shift (NE < PLUS).
    Conflict between rule 57 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 57 and token GE resolved as reduce (%left GE).
    Conflict between rule 57 and token GT resolved as reduce (%left GT).
    Conflict between rule 57 and token LE resolved as reduce (%left LE).
    Conflict between rule 57 and token LT resolved as reduce (%left LT).
    Conflict between rule 57 and token MOD resolved as shift (NE < MOD).
    Conflict between rule 57 and token NE resolved as reduce (%left NE).
    Conflict between rule 57 and token AND resolved as reduce (AND < NE).
    Conflict between rule 57 and token OR resolved as reduce (OR < NE).


state 123

   52 expr: expr . OR expr
   53     | expr . AND expr  [SEMICOLON, COMMA, LBRACE, AND, OR, RPAR, RSQ]
   53     | expr AND expr .  [SEMICOLON, COMMA, LBRACE, AND, OR, RPAR, RSQ]
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95

    $default  reduce using rule 53 (expr)

    Conflict between rule 53 and token STAR resolved as shift (AND < STAR).
    Conflict between rule 53 and token DIV resolved as shift (AND < DIV).
    Conflict between rule 53 and token MINUS resolved as shift (AND < MINUS).
    Conflict between rule 53 and token PLUS resolved as shift (AND < PLUS).
    Conflict between rule 53 and token EQ resolved as shift (AND < EQ).
    Conflict between rule 53 and token GE resolved as shift (AND < GE).
    Conflict between rule 53 and token GT resolved as shift (AND < GT).
    Conflict between rule 53 and token LE resolved as shift (AND < LE).
    Conflict between rule 53 and token LT resolved as shift (AND < LT).
    Conflict between rule 53 and token MOD resolved as shift (AND < MOD).
    Conflict between rule 53 and token NE resolved as shift (AND < NE).
    Conflict between rule 53 and token AND resolved as reduce (%left AND).
    Conflict between rule 53 and token OR resolved as reduce (OR < AND).


state 124

   52 expr: expr . OR expr  [SEMICOLON, COMMA, LBRACE, OR, RPAR, RSQ]
   52     | expr OR expr .  [SEMICOLON, COMMA, LBRACE, OR, RPAR, RSQ]
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95
    AND    shift, and go to state 96

    $default  reduce using rule 52 (expr)

    Conflict between rule 52 and token STAR resolved as shift (OR < STAR).
    Conflict between rule 52 and token DIV resolved as shift (OR < DIV).
    Conflict between rule 52 and token MINUS resolved as shift (OR < MINUS).
    Conflict between rule 52 and token PLUS resolved as shift (OR < PLUS).
    Conflict between rule 52 and token EQ resolved as shift (OR < EQ).
    Conflict between rule 52 and token GE resolved as shift (OR < GE).
    Conflict between rule 52 and token GT resolved as shift (OR < GT).
    Conflict between rule 52 and token LE resolved as shift (OR < LE).
    Conflict between rule 52 and token LT resolved as shift (OR < LT).
    Conflict between rule 52 and token MOD resolved as shift (OR < MOD).
    Conflict between rule 52 and token NE resolved as shift (OR < NE).
    Conflict between rule 52 and token AND resolved as shift (OR < AND).
    Conflict between rule 52 and token OR resolved as reduce (%left OR).


state 125

   28 statement: . IDENTIFIER ASSIGN expr
   29          | . LBRACE statement2 RBRACE
   30          | . IF expr LBRACE statement2 RBRACE statement3
   31          | . FOR statement4 LBRACE statement2 RBRACE
   31          | FOR statement4 LBRACE statement2 . RBRACE
   32          | . RETURN statement4
   33          | . funcinvocation
   34          | . parseargs
   35          | . PRINT LPAR printstatement RPAR
   36          | . error
   37 statement2: statement2 . statement SEMICOLON
   45 parseargs: . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR

    error       shift, and go to state 41
    LBRACE      shift, and go to state 43
    RBRACE      shift, and go to state 133
    RETURN      shift, and go to state 45
    FOR         shift, and go to state 46
    IF          shift, and go to state 47
    PRINT       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49

    statement       go to state 79
    parseargs       go to state 52
    funcinvocation  go to state 53


state 126

   28 statement: . IDENTIFIER ASSIGN expr
   29          | . LBRACE statement2 RBRACE
   30          | . IF expr LBRACE statement2 RBRACE statement3
   30          | IF expr LBRACE statement2 . RBRACE statement3
   31          | . FOR statement4 LBRACE statement2 RBRACE
   32          | . RETURN statement4
   33          | . funcinvocation
   34          | . parseargs
   35          | . PRINT LPAR printstatement RPAR
   36          | . error
   37 statement2: statement2 . statement SEMICOLON
   45 parseargs: . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR

    error       shift, and go to state 41
    LBRACE      shift, and go to state 43
    RBRACE      shift, and go to state 134
    RETURN      shift, and go to state 45
    FOR         shift, and go to state 46
    IF          shift, and go to state 47
    PRINT       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49

    statement       go to state 79
    parseargs       go to state 52
    funcinvocation  go to state 53


state 127

   35 statement: PRINT LPAR printstatement RPAR .

    $default  reduce using rule 35 (statement)


state 128

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN . PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | IDENTIFIER COMMA BLANKID ASSIGN . PARSEINT LPAR error RPAR

    PARSEINT  shift, and go to state 135


state 129

   49 funcinvocation: IDENTIFIER LPAR error RPAR .

    $default  reduce using rule 49 (funcinvocation)


state 130

   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   50 funcinvocation2: COMMA . expr funcinvocation2
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 136


state 131

   47 funcinvocation: IDENTIFIER LPAR expr funcinvocation2 . RPAR

    RPAR  shift, and go to state 137


state 132

   21 parameters2: COMMA IDENTIFIER type parameters2 .

    $default  reduce using rule 21 (parameters2)


state 133

   31 statement: FOR statement4 LBRACE statement2 RBRACE .

    $default  reduce using rule 31 (statement)


state 134

   30 statement: IF expr LBRACE statement2 RBRACE . statement3
   39 statement3: . ELSE LBRACE statement2 RBRACE
   40           | .  [SEMICOLON]

    ELSE  shift, and go to state 138

    $default  reduce using rule 40 (statement3)

    statement3  go to state 139


state 135

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT . LPAR CMDARGS LSQ expr RSQ RPAR
   46          | IDENTIFIER COMMA BLANKID ASSIGN PARSEINT . LPAR error RPAR

    LPAR  shift, and go to state 140


state 136

   50 funcinvocation2: . COMMA expr funcinvocation2
   50                | COMMA expr . funcinvocation2
   51                | .  [RPAR]
   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    COMMA  shift, and go to state 130
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95
    AND    shift, and go to state 96
    OR     shift, and go to state 97

    $default  reduce using rule 51 (funcinvocation2)

    funcinvocation2  go to state 141


state 137

   47 funcinvocation: IDENTIFIER LPAR expr funcinvocation2 RPAR .

    $default  reduce using rule 47 (funcinvocation)


state 138

   39 statement3: ELSE . LBRACE statement2 RBRACE

    LBRACE  shift, and go to state 142


state 139

   30 statement: IF expr LBRACE statement2 RBRACE statement3 .

    $default  reduce using rule 30 (statement)


state 140

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR . CMDARGS LSQ expr RSQ RPAR
   46          | IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR . error RPAR

    error    shift, and go to state 143
    CMDARGS  shift, and go to state 144


state 141

   50 funcinvocation2: COMMA expr funcinvocation2 .

    $default  reduce using rule 50 (funcinvocation2)


state 142

   37 statement2: . statement2 statement SEMICOLON
   38           | .
   39 statement3: ELSE LBRACE . statement2 RBRACE

    $default  reduce using rule 38 (statement2)

    statement2  go to state 145


state 143

   46 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR error . RPAR

    RPAR  shift, and go to state 146


state 144

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS . LSQ expr RSQ RPAR

    LSQ  shift, and go to state 147


state 145

   28 statement: . IDENTIFIER ASSIGN expr
   29          | . LBRACE statement2 RBRACE
   30          | . IF expr LBRACE statement2 RBRACE statement3
   31          | . FOR statement4 LBRACE statement2 RBRACE
   32          | . RETURN statement4
   33          | . funcinvocation
   34          | . parseargs
   35          | . PRINT LPAR printstatement RPAR
   36          | . error
   37 statement2: statement2 . statement SEMICOLON
   39 statement3: ELSE LBRACE statement2 . RBRACE
   45 parseargs: . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR
   46          | . IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR

    error       shift, and go to state 41
    LBRACE      shift, and go to state 43
    RBRACE      shift, and go to state 148
    RETURN      shift, and go to state 45
    FOR         shift, and go to state 46
    IF          shift, and go to state 47
    PRINT       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49

    statement       go to state 79
    parseargs       go to state 52
    funcinvocation  go to state 53


state 146

   46 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR .

    $default  reduce using rule 46 (parseargs)


state 147

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ . expr RSQ RPAR
   47 funcinvocation: . IDENTIFIER LPAR expr funcinvocation2 RPAR
   48               | . IDENTIFIER LPAR RPAR
   49               | . IDENTIFIER LPAR error RPAR
   52 expr: . expr OR expr
   53     | . expr AND expr
   54     | . expr LT expr
   55     | . expr GT expr
   56     | . expr EQ expr
   57     | . expr NE expr
   58     | . expr LE expr
   59     | . expr GE expr
   60     | . expr PLUS expr
   61     | . expr MINUS expr
   62     | . expr STAR expr
   63     | . expr DIV expr
   64     | . expr MOD expr
   65     | . NOT expr
   66     | . MINUS expr
   67     | . PLUS expr
   68     | . NATURAL
   69     | . DECIMAL
   70     | . IDENTIFIER
   71     | . funcinvocation
   72     | . LPAR expr RPAR
   73     | . LPAR error RPAR

    MINUS       shift, and go to state 59
    PLUS        shift, and go to state 60
    LPAR        shift, and go to state 61
    NOT         shift, and go to state 62
    IDENTIFIER  shift, and go to state 63
    NATURAL     shift, and go to state 64
    DECIMAL     shift, and go to state 65

    funcinvocation  go to state 67
    expr            go to state 149


state 148

   39 statement3: ELSE LBRACE statement2 RBRACE .

    $default  reduce using rule 39 (statement3)


state 149

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr . RSQ RPAR
   52 expr: expr . OR expr
   53     | expr . AND expr
   54     | expr . LT expr
   55     | expr . GT expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . LE expr
   59     | expr . GE expr
   60     | expr . PLUS expr
   61     | expr . MINUS expr
   62     | expr . STAR expr
   63     | expr . DIV expr
   64     | expr . MOD expr

    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    MINUS  shift, and go to state 87
    PLUS   shift, and go to state 88
    EQ     shift, and go to state 89
    GE     shift, and go to state 90
    GT     shift, and go to state 91
    LE     shift, and go to state 92
    LT     shift, and go to state 93
    MOD    shift, and go to state 94
    NE     shift, and go to state 95
    AND    shift, and go to state 96
    OR     shift, and go to state 97
    RSQ    shift, and go to state 150


state 150

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ . RPAR

    RPAR  shift, and go to state 151


state 151

   45 parseargs: IDENTIFIER COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ expr RSQ RPAR .

    $default  reduce using rule 45 (parseargs)
